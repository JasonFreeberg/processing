plot(fitPH)
plot(sexKM)
only_women <- mgus[mgus$sex == "female", ]
women_surv <- Surv(time=only_women$futime, event=only_women$death)
women_fit <- survfit(women_surv)
women_fit <- survfit(women_surv ~ 1)
only_women <- mgus[mgus$sex == "female", ]
women_surv <- Surv(time=only_women$futime, event=only_women$death)
women_KM <- survfit(women_surv ~ 1)
#sexKM <- survfit(basefit ~ mgus$sex)
fitPH <- survfit(sexPH)
#plot(sexKM)
plot(women_KM)
plot(fitPH)
K
plot(women_KM)
plot(fitPH)
class(women_KM)
fitPH
ggsurv(fitPH)
ggsurv(fitPH)
ggsurv(women_KM)
ggsurv(women_KM)
ggsurv(fitPH)
ggsurv(women_KM) + layer(ggsurv(fitPH))
ggsurv(women_KM) + layer(ggsurv(fitPH), stat = "identity")
lines(fitPH)
plot(women_KM)
lines(fitPH)
lines(fitPH, col = "red")
plot(women_KM)
lines(fitPH, col = "red")
plot(women_KM, conf.int = F)
lines(fitPH, col = "red", conf.int = F)
plot(women_KM, conf.int = F)
lines(fitPH, col = "red", conf.int = F)
title("Comparison of KM and Cox Model")
plot(women_KM, conf.int = F)
lines(fitPH, col = "red", conf.int = F)
title("Comparison of KM and Cox Model")
cox.zph(women_KM, fitPH)
cox.zph(sexPH)
cox.zph(sexPH)
summary(cox.zph(sexPH))
cox.zph(sexPH)
plot(cox.zph(sexPH))
plot(cox.zph(sexPH))
plot(cox.zph(sexPH))
hline()
plot(cox.zph(sexPH))
abline(a = 0.5, b = 0)
plot(cox.zph(sexPH))
abline(a = 0.35, b = 0, col = "red")
ggplot(mgus, mapping = aes(time = futime, status = death, color = factor(sex)))  +
geom_km(trans = "cloglog") +
ggtitle("Loglog plot of \n KM Estimate by sex") +
ylab("Y") +
theme(legend.title = element_blank())
library(arules)
install.packages("arules")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
a_priori <- apriori(trans, parameter = list(support=0.01, confidence=0.5))
rules <- as.data.frame(inspect(a_priori))
ordering <- order(rules[,"support"], decreasing = T)
rules
names(rules)
inspect(a_priori)
class(inspect(a_priori))
class(inspect(a_priori))
rules <- inspect(a_priori)
ordering <- order(rules$support, decreasing = T)
rules$support
sort(rules$support)
sort(rules$support, decreasing = T)
rules <- sort(rules$support, decreasing=T)
rules[1:5, ]
rules[1:5]
rules <- rules[with(rules, order(-support))]
a_priori <- apriori(trans, parameter = list(support=0.01, confidence=0.5))
rules <- inspect(a_priori)
rules <- rules[with(rules, order(-support))]
rules <- rules[with(rules, order(-support)), ]
rules[1:5, ]
source('~/.active-rstudio-document', echo=TRUE)
?order
rules <- rules[with(rules, order(support, decreasing = T)), ]
rules[1:5, ]
library(plyr)
library(dplyr)
source('~/.active-rstudio-document', echo=TRUE)
with(rules, order(support, decreasing = T))
with(rules, order("support", decreasing = T))
with(rules, order(rules$support, decreasing = T))
class(rules)
rules
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
rules
source('~/.active-rstudio-document', echo=TRUE)
View(goods)
source('~/.active-rstudio-document', echo=TRUE)
head(inspect(rules), 5)
inspect(head(rules, 5))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
rules
a_priori
inspect(a_priori)
rules <- data.frame(inspect(rules))
a_priori <- apriori(trans, parameter = list(support=0.01, confidence=0.5))
a_priori
as.data.frame(a_priori)
as.data.frame(inspect(a_priori, head))
as.data.frame(inspect(a_priori, 5))
as.data.frame(inspect(a_priori))
as.data.frame(labels(lhs(a_priori)))
a_priori@quality
ggplot(a_priori@quality) +
geom_point(aes(x=support, y=confidence, color=lift)) +
ggtitle("Support and Confidence of Rules")
names_of_items
a <- paste("Names of items in first five transactions:", paste(names_of_items, collapse = ", "))
a
paste("Names of items in first five transactions:", paste(names_of_items, collapse = ", "))
paste("Names of items in first five transactions... \n", paste(names_of_items, collapse = ", "))
paste("Names of items in first five transactions...", paste(names_of_items, collapse = ", "), sep = "\n")
strsplit(paste("Names of items in first five transactions...", paste(names_of_items, collapse = ", "), sep = "\n"), split = "/n")
```
strsplit(paste("Names of items in first five transactions...", paste(names_of_items, collapse = ", "), sep = "\n"), split = "/n")
strsplit(paste("Names of items in first five transactions...", paste(names_of_items, collapse = ", "), sep = "\n"), split = "/n")
msg <- "==================================================\n"
msg2 <- paste(msg, "Var:")
strsplit(msg2, "\n")[[1]]
msg2
strsplit(paste("Names of items in first five transactions...", paste(names_of_items, collapse = ", "), sep = "\n"), split = "/n")
strsplit(paste("Names of items in first five transactions...", paste(names_of_items, collapse = ", "), sep = "\n "), split = "/n")
a <- paste("Names of items in first five transactions... ")
b <- paste(names_of_items, collapse = ", ")
neatPrint(c(a,b))
neatPrint <- function(listOfStrings){
cat(listOfStrings, fill = 1)
}
a <- paste("Names of items in first five transactions... ")
b <- paste(names_of_items, collapse = ", ")
neatPrint(c(a,b))
source('~/.active-rstudio-document', echo=TRUE)
knitr::opts_chunks$set(engine = 'python')
knitr::opts_chunk$set(engine = 'python')
knitr::opts_chunk$set(engine = 'python')
edu_coxph
# Loading necessary libraries
library(ggplot2)
library(survival)
library(cowplot)
library(devtools)
library(ggkm)
# ggkm is not on CRAN, using devtools we can install it from GitHub
# devtools::install_github("sachsmc/ggkm")
# FUNCTIONS
# This chunk is hidden from the knitted PDF
# Function to make the wife's race
femalecol <- function(dataframe){
dataframe$wblack <- as.factor(
ifelse(dataframe$hblack == dataframe$mixed & dataframe$hblack == 1, 0,
ifelse(dataframe$hblack == 1 & dataframe$mixed == 0, 1,
ifelse(dataframe$hblack == 0 & dataframe$mixed == 1, 1, 0)))
)
return(dataframe)
}
# Encode couple's racial makeup
couple_column <- function(dataframe){
# Encodes couple's race into one column
# Husband's race first, then wife's race
# BB => Black and Black
# BO => Black and Other
# OB => Other and Black
# OO => Other and Other
dataframe$couple <- as.factor(
ifelse(dataframe$hblack == 1 & dataframe$wblack == 1, "BB",
ifelse(dataframe$hblack == 1 & dataframe$wblack == 0, "BO",
ifelse(dataframe$hblack == 0 & dataframe$wblack == 1, "OB", "OO")))
)
return(dataframe)
}
# Define the neatPrint function, makes for nicer output in Rmarkdown
neatPrint <- function(listOfStrings){
cat(listOfStrings, fill = 1)
}
# Define the ggsurv function, credit and link are below
ggsurv <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
cens.col = 'red', lty.est = 1, lty.ci = 2,
cens.shape = 3, back.white = F, xlab = 'Time',
ylab = 'Survival', main = ''){
library(ggplot2)
strata <- ifelse(is.null(s$strata) ==T, 1, length(s$strata))
stopifnot(length(surv.col) == 1 | length(surv.col) == strata)
stopifnot(length(lty.est) == 1 | length(lty.est) == strata)
ggsurv.s <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
cens.col = 'red', lty.est = 1, lty.ci = 2,
cens.shape = 3, back.white = F, xlab = 'Time',
ylab = 'Survival', main = ''){
dat <- data.frame(time = c(0, s$time),
surv = c(1, s$surv),
up = c(1, s$upper),
low = c(1, s$lower),
cens = c(0, s$n.censor))
dat.cens <- subset(dat, cens != 0)
col <- ifelse(surv.col == 'gg.def', 'black', surv.col)
pl <- ggplot(dat, aes(x = time, y = surv)) +
xlab(xlab) + ylab(ylab) + ggtitle(main) +
geom_step(col = col, lty = lty.est)
pl <- if(CI == T | CI == 'def') {
pl + geom_step(aes(y = up), color = col, lty = lty.ci) +
geom_step(aes(y = low), color = col, lty = lty.ci)
} else (pl)
pl <- if(plot.cens == T & length(dat.cens) > 0){
pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
col = cens.col)
} else if (plot.cens == T & length(dat.cens) == 0){
stop ('There are no censored observations')
} else(pl)
pl <- if(back.white == T) {pl + theme_bw()
} else (pl)
pl
}
ggsurv.m <- function(s, CI = 'def', plot.cens = T, surv.col = 'gg.def',
cens.col = 'red', lty.est = 1, lty.ci = 2,
cens.shape = 3, back.white = F, xlab = 'Time',
ylab = 'Survival', main = '') {
n <- s$strata
groups <- factor(unlist(strsplit(names
(s$strata), '='))[seq(2, 2*strata, by = 2)])
gr.name <-  unlist(strsplit(names(s$strata), '='))[1]
gr.df <- vector('list', strata)
ind <- vector('list', strata)
n.ind <- c(0,n); n.ind <- cumsum(n.ind)
for(i in 1:strata) ind[[i]] <- (n.ind[i]+1):n.ind[i+1]
for(i in 1:strata){
gr.df[[i]] <- data.frame(
time = c(0, s$time[ ind[[i]] ]),
surv = c(1, s$surv[ ind[[i]] ]),
up = c(1, s$upper[ ind[[i]] ]),
low = c(1, s$lower[ ind[[i]] ]),
cens = c(0, s$n.censor[ ind[[i]] ]),
group = rep(groups[i], n[i] + 1))
}
dat <- do.call(rbind, gr.df)
dat.cens <- subset(dat, cens != 0)
pl <- ggplot(dat, aes(x = time, y = surv, group = group)) +
xlab(xlab) + ylab(ylab) + ggtitle(main) +
geom_step(aes(col = group, lty = group))
col <- if(length(surv.col == 1)){
scale_colour_manual(name = gr.name, values = rep(surv.col, strata))
} else{
scale_colour_manual(name = gr.name, values = surv.col)
}
pl <- if(surv.col[1] != 'gg.def'){
pl + col
} else {pl + scale_colour_discrete(name = gr.name)}
line <- if(length(lty.est) == 1){
scale_linetype_manual(name = gr.name, values = rep(lty.est, strata))
} else {scale_linetype_manual(name = gr.name, values = lty.est)}
pl <- pl + line
pl <- if(CI == T) {
if(length(surv.col) > 1 && length(lty.est) > 1){
stop('Either surv.col or lty.est should be of length 1 in order
to plot 95% CI with multiple strata')
}else if((length(surv.col) > 1 | surv.col == 'gg.def')[1]){
pl + geom_step(aes(y = up, color = group), lty = lty.ci) +
geom_step(aes(y = low, color = group), lty = lty.ci)
} else{pl +  geom_step(aes(y = up, lty = group), col = surv.col) +
geom_step(aes(y = low,lty = group), col = surv.col)}
} else {pl}
pl <- if(plot.cens == T & length(dat.cens) > 0){
pl + geom_point(data = dat.cens, aes(y = surv), shape = cens.shape,
col = cens.col)
} else if (plot.cens == T & length(dat.cens) == 0){
stop ('There are no censored observations')
} else(pl)
pl <- if(back.white == T) {pl + theme_bw()
} else (pl)
pl
}
pl <- if(strata == 1) {ggsurv.s(s, CI , plot.cens, surv.col ,
cens.col, lty.est, lty.ci,
cens.shape, back.white, xlab,
ylab, main)
} else {ggsurv.m(s, CI, plot.cens, surv.col ,
cens.col, lty.est, lty.ci,
cens.shape, back.white, xlab,
ylab, main)}
pl
}
# Load data
colNames <- c("id", "edu", "hblack", "mixed", "years", "div")
divorce <- read.table(file = "divorce.txt", header = F, col.names = colNames)
# Coerce numeric variables
divorce$edu <- as.factor(divorce$edu)
divorce$hblack <- as.factor(divorce$hblack)
divorce$mixed <- as.factor(divorce$mixed)
# Encode race variables
divorce <- femalecol(divorce)
divorce <- couple_column(divorce)
head(divorce)
#couple_table <- table(divorce$couple)
#neatPrint(c("Frequency of couple makeups:", couple_table))
# Smooth histograms of censored variables
a <- ggplot(divorce) +
geom_density(mapping = (aes(x=years, fill = as.factor(div), group = div)), alpha = .5)+
ggtitle("Distribution of Censored and\n Non-Censored Observations")+
theme(legend.title = element_blank())
# Get proportions of mixed couples in each education bracket
edu_counts <- as.data.frame.matrix(table(divorce$edu, divorce$mixed))
names(edu_counts) = c("no_mix", "mixed")
row.names(edu_counts) = c("HS", "BA", "MA")
mixed_HS = paste(round( (edu_counts$mixed[1] / sum(edu_counts[1,])), 2) * 100, "%", sep = "")
mixed_BA = paste(round( (edu_counts$mixed[2] / sum(edu_counts[2,])), 2) * 100, "%", sep = "")
mixed_MA = paste(round( (edu_counts$mixed[3] / sum(edu_counts[3,])), 2) * 100, "%", sep = "")
appending_text = "\n mixed"
HS_text = paste(mixed_HS, appending_text)
BA_text = paste("\n", mixed_BA, appending_text)
MA_text = paste(mixed_MA, appending_text)
proportions = c(HS_text, BA_text, MA_text)
# Bar plot of education levels, colored by race
b <- ggplot(divorce)+
geom_bar(mapping = aes(x=edu, fill = as.factor(hblack))) +
geom_text(mapping = aes(x=edu), label = proportions, stat="count") +
ggtitle("Frequency of Education Levels \n Colored by Male's Race") +
xlab("Education Level") +
theme(legend.title = element_blank())
plot_grid(a,b)
# Some KM estimates
divorcefit <- Surv(time = divorce$years, event = divorce$div)
divorceKM <- survfit(divorcefit ~ 1)
educateKM <- survfit(divorcefit ~ divorce$edu)
mixedKM <- survfit(divorcefit ~ divorce$mixed)
coupleKM <- survfit(divorcefit ~ divorce$couple)
a <- ggsurv(divorceKM, plot.cens = F) +
ggtitle("Baseline Model") +
ylab("Survival Probability") +
xlab("Time in Years") + ylab("Probability")
b <- ggsurv(educateKM, plot.cens = F) +
ggtitle("Estimates by Education Level") +
ylab("Survival Probability") +
xlab("Time in Years") +
theme(legend.title = element_blank()) + ylab("Probability")
c <- ggsurv(mixedKM, plot.cens = F) +
ggtitle("Estimates of Mixed Race Couples") +
ylab("Survival Probability") +
xlab("Time in Years") +
theme(legend.title = element_blank()) + ylab("Probability")
d <- ggsurv(coupleKM, plot.cens = F) +
ggtitle("Estimates by Racial Makeup") +
ylab("Survival Probability") +
xlab("Time in Years") +
theme(legend.title = element_blank()) + ylab("Probability")
plot_grid(a,b, nrow = 1, ncol = 2, label_size = 10)
plot_grid(c,d, nrow = 1, ncol = 2, label_size = 10)
# Base model using only education
edu_coxph <- coxph(Surv(years, div) ~ edu, data = divorce)
edu_coxph
eh_coxph <- coxph(Surv(years,div) ~ edu + hblack, data=divorce)
em_coxph <- coxph(Surv(years,div) ~ edu + mixed, data=divorce)
emb_coxph <- coxph(Surv(years,div) ~ edu + mixed + hblack, data=divorce)
embw_coxph <- coxph(Surv(years,div) ~ edu + mixed + hblack + wblack, data=divorce)
eh_coxph
em_coxph
emb_coxph
embw_coxph
edu_BIC <- BIC(edu_coxph)
eh_BIC <- BIC(eh_coxph)
em_BIC <- BIC(em_coxph)
emb_BIC <- BIC(emb_coxph)
embw_BIC <- BIC(embw_coxph)
# A new model using the new "couple"" covariate
edu_couple_coxph <- coxph(Surv(years, div) ~ edu + couple, data = divorce)
edu_couple_BIC <- BIC(edu_couple_coxph)
r = 2
a = paste("Base model =", round(edu_BIC, r))
c = paste("Edu + Mixed =", round(em_BIC, r))
b = paste("Edu + Husband =", round(eh_BIC, r))
d = paste("Edu + Mixed + Husband =", round(emb_BIC, r))
e = paste("Edu + Mixed + Husband + Wife =", round(embw_BIC, r))
f = paste("Edu + Couple =", round(edu_couple_BIC, r))
neatPrint(c(a,b,c,d,e,f))
chi_test <- 2*(edu_couple_coxph$loglik[[2]] - em_coxph$loglik[[2]])
# 5 parameters in the bigger model (lots of factor levels)
# 3 parameters in the restricted model
1 - pchisq(chi_test, df = 5-3)
# Make more ticks marks on the X axis?
a <- ggplot(divorce, mapping = aes(time = years, status = div, color = edu)) +
geom_km(trans = "cloglog") +
ylab("Complementary Log-Log") +
ggtitle("Log-Log curve for Education level") +
ylab("Y") +
xlab("ln(time)") +
scale_x_log10() +
geom_vline(mapping = aes(alpha = 0.5, color = "grey"), xintercept = 3.85) +
theme(legend.title = element_blank())
b <- ggplot(divorce, mapping = aes(time = years, status = div, color = couple)) +
geom_km(trans = "cloglog") +
ylab("Complementary Log-Log") +
ggtitle("Log-Log curve for Couple Makeup") +
ylab("Y") +
xlab("ln(time)") +
scale_x_log10() +
theme(legend.title = element_blank())
plot_grid(a,b)
edu_zph <- cox.zph(edu_coxph)
edu_couple_zph <- cox.zph(edu_couple_coxph)
edu_couple_zph
# Construct Cox-PH model with the stratified variable
edu_strata_coxph <- coxph(Surv(years, div) ~ edu + strata(couple), data = divorce)
edu_strata_zph <- cox.zph(edu_strata_coxph)
strata_BIC <- round(BIC(edu_strata_coxph), r)
a <- paste("Base model BIC =", round(edu_BIC, r))
b <- paste("Strata model BIC =", round(strata_BIC))
edu_strata_coxph
edu_strata_zph
neatPrint(c(a,b))
couple_levels = as.factor(c("BB", "BO", "OB", "OO"))
ymin = 0.3
margin_ = c(3, 3, 1, 1)
# Edu 0
contors1 <- data.frame(couple = couple_levels,
edu = as.factor(0))
edu_strata_km1 <- survfit(edu_strata_coxph, newdata = contors1)
par(mar = margin_)
plot(edu_strata_km1, col = 1:4, lty = 1, ymin = ymin)
legend(50, 1, couple_levels, col = 1:4, lty = 1)
title("HS Education with Stratification")
# Edu 1
contors2 <- data.frame(couple = couple_levels,
edu = as.factor(1))
edu_strata_km2 <- survfit(edu_strata_coxph, newdata = contors2)
par(mar = margin_)
plot(edu_strata_km2, col = 1:4, lty = 1, ymin = ymin)
legend(50, 1, couple_levels, col = 1:4, lty = 1)
title("BS Education with Stratification")
# Edu 2
contors3 <- data.frame(couple = couple_levels,
edu = as.factor(2))
edu_strata_km3 <- survfit(edu_strata_coxph, newdata = contors3)
par(mar = margin_)
plot(edu_strata_km3, col = 1:4, lty = 1, ymin = ymin)
legend(50, 1, couple_levels, col = 1:4, lty = 1)
title("Graduate Education with Stratification")
# Split on t = exp(3.85) = 47
edu_split_df <- survSplit(Surv(years, div) ~ edu, data = divorce, cut = 47, episode = "Ep")
edu_surv_split <- coxph(Surv(years, div) ~ edu:Ep, data = edu_split_df)
edu_surv_split
conf_int <- summary(edu_strata_coxph)$conf.int[,3:4]
conf_int
colNames <- c("id", "edu", "hblack", "mixed", "years", "div")
divorce <- read.table(file = "divorce.txt", header = F, col.names = colNames)
# Coerce numeric variables
divorce$edu <- as.factor(divorce$edu)
divorce$hblack <- as.factor(divorce$hblack)
divorce$mixed <- as.factor(divorce$mixed)
# Encode race variables
divorce <- femalecol(divorce)
divorcefit <- Surv(time = divorce$years, event = divorce$div)
library(survival)
divorcefit <- Surv(time = divorce$years, event = divorce$div)
divorcefit
divorceKM <- survfit(divorcefit ~ 1)
divorcefit
divorceKM <- survfit(divorcefit ~ 1)
divorceKM
divorceKM$n
divorceKM$n.risk
divorceKM$eduo0
divorceKM$edu0
educateKM <- survfit(divorcefit ~ divorce$edu)
educateKM
educateKM$edu
divorce
summary(educateKM)
a <- 3
print(a)
install.packages(c('repr', 'IRdisplay', 'crayon', 'pbdZMQ', 'devtools'))
print("working")
install.packages(c('repr', 'IRdisplay', 'crayon', 'pbdZMQ', 'devtools'))
devtools::install_github('IRkernel/IRkernel')
weights <- c( 64 , 71 , 64 , 69 , 76 , 53 , 52 , 72 , 79 , 68 ,
61 , 72 , 63 , 67 , 72 , 49 , 54 , 72 , 74 , 66 )
xvec1   <- c( rep(1, 10), rep(0, 10) )
xvec2   <- c( rep(0, 10), rep(1, 10) )
lmfit1  <- lm( weights ~ xvec1 + xvec2 )
lmfit1
xvec1   <- c( rep(1, 10), rep(0, 10) )
xvec2   <- c( rep(0, 10), rep(1, 10) )
lmfit1  <- lm( weights ~ 1 + xvec1 + xvec2 )
lmfit1
cwd("Desktop/Java/hobbies/")
wd("Desktop/Java/hobbies")
setwd("Desktop/Java/hobbies")
ls()
a1 <- read.csv("hobbies_06_08.csv")
head(a1)
a2 <- read.csv("hobbies_09_10.csv")
a3 <- read.csv("hobbies_11_13.csv")
a4 <- read.csv("hobbies_14_17.csv")
b <- rbind(a1,a2,a3,a4)
write.csv(x = b, file = "hobbies.csv")
View(b)
summary(b)
